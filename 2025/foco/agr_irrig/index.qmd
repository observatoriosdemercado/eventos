---
title: "REVISÃO DE FOCO DA UNIDADE - AGRICULTURA IRRIGADA"
author: "João Ricardo F. de Lima"
date: "today"
editor: source
lang: pt
language: 
  toc-title-document: '<a href="https://observatoriosdemercado.github.io/manga/" target="_blank"><img src="https://github.com/observatoriosdemercado/manga/blob/main/logo_embrapa.jpg?raw=true" alt="Logotipo Embrapa" width="150"></a>'
format: 
  html:
    toc: true
    toc_float:
      collapsed: yes
      smooth_scroll: yes
    toc-location: left
    code-fold: false
    embed-resources: true
    page-layout: full
#    fig-asp: 0.618
    fig-width: 10
    fig-height: 8
#    fig-dpi: 200
    fig-align: center
    df-print: paged
theme:
  light: flatly
execute:
  echo: false
  message: false
  warning: false
  cache: false
jupyter: python3
---

## Revisão de Foco

Esta análise é para a agricultura irrigada. 

```{python}
#| eval: true
#| echo: false
#| message: false
#| warning: false

import pandas as pd
from pandas import NA
import re
import unicodedata

# Load dataset
df = (
    pd.read_csv('dados/agr_irrig.csv', sep=';')
)

# 1) nomes atuais (vêm direto do df)
old_cols = list(df.columns)

# 2) seus novos nomes (na MESMA ordem das colunas atuais)
new_cols = [
    "data","email","nome","cidade_uf","perfil",
    "qualidade_pesq","relevancia_solucoes","agilidade_respostas","conhecimento_tecnico",
    "interacao_agro","comunicacao","oportunidades","riscos",
    "importancia_melhoramento","importancia_manejo_agua","importancia_manejo_doencas","importancia_manejo_pragas",
    "importancia_sistemas_prod","importancia_monit_gases","importancia_ferramentas_biotec","importancia_tecno_alimen",
    "importancia_poscolheita","importancia_mercado",
    "satisfacao_melhoramento","satisfacao_manejo_agua","satisfacao_manejo_doencas","satisfacao_manejo_pragas",
    "satisfacao_sistemas_prod","satisfacao_monit_gases","satisfacao_ferramentas_biotec","satisfacao_tecno_alimen",
    "satisfacao_poscolheita","satisfacao_mercado",
    "demandas","comentarios","contribuicao_sociedade"
]

# 3) checar e aplicar
if len(old_cols) != len(new_cols):
    raise ValueError(f"Número de colunas difere: {len(old_cols)} ≠ {len(new_cols)}")

mapping = dict(zip(old_cols, new_cols))
df = df.rename(columns=mapping)

# conferir
#print(df.columns.tolist())
```

```{python}
# ajuste na variável data
df["data"] = pd.to_datetime(df["data"], dayfirst=True, errors="coerce")
df[["data"]].head()

# ajuste de cidade
def strip_acc(s): 
    return "".join(ch for ch in unicodedata.normalize("NFKD", str(s)) if not unicodedata.combining(ch))

def norm_key(x):
    x = strip_acc(str(x)).upper().strip()
    x = re.sub(r"\s+", " ", x)
    return x

# mapeamento MANUAL (para sua base agr_irrig)
over = {
    # --- Petrolina e variações ---
    "PETROLINA/PE": "Petrolina-PE",
    "PETROLINA-PE": "Petrolina-PE",
    "PETROLINA PE": "Petrolina-PE",
    "PETROLINA": "Petrolina-PE",                 # se quiser forçar PE quando vier só "Petrolina"
    "PETROLINA PERNAMBUCO": "Petrolina-PE",
    "PETROLINA-PERNAMBUCO": "Petrolina-PE",
    "PETROLINA - PERNAMBUCO": "Petrolina-PE",
    "PETROLINA - PE": "Petrolina-PE",
    "PETROLINA -PE": "Petrolina-PE",
    "PETROLINA- PE": "Petrolina-PE",

    # --- Estados sozinhos ---
    "PE": "-PE",
    "PERNAMBUCO": "-PE",
    "BAHIA": "-BA",
    "CEARA": "-CE",
    "SAO PAULO": "-SP",

    # --- Juazeiro (BA) ---
    "JUAZEIRO-BA": "Juazeiro-BA",
    "JUAZEIRO/BA": "Juazeiro-BA",
    "JUAZEIRO BAHIA": "Juazeiro-BA",
    "JUAZEIRO-BAHIA": "Juazeiro-BA",
    "JUAZEIRO - BAHIA": "Juazeiro-BA",
    "JUAZEIRO BA": "Juazeiro-BA",
    "JUAZEIRO, BAHIA": "Juazeiro-BA",

    # --- Recife ---
    "RECIFE-PERNAMBUCO": "Recife-PE",
    "RECIFE - PERNAMBUCO": "Recife-PE",

    # --- Santa Maria da Boa Vista (PE) ---
    "SANTA MARIA DA BOA VISTA-PE": "Santa Maria da Boa Vista-PE",
    "SANTA MARIA D BOA VISTA": "Santa Maria da Boa Vista-PE",

    # --- Lagoa Grande (PE) ---
    "LAGOA GRANDE-PE": "Lagoa Grande-PE",
    "LAGOA GRANDE PE": "Lagoa Grande-PE",
    "LAGOA GRANDE PE ": "Lagoa Grande-PE",

    # --- Fortaleza (CE) ---
    "FORTALEZA-CE": "Fortaleza-CE",
    "FORTALEZA CEARA": "Fortaleza-CE",
    "FORTALEZA, CEARA": "Fortaleza-CE",

    # --- Russas (CE) ---
    "RUSSAS-CE": "Russas-CE",

    # --- Umarizal (RN) ---
    "UMARIZAL RN": "Umarizal-RN",

    # --- Assú (RN) ---
    "ASSU-RIO GRANDE DO NORTE": "Assú-RN",
    "ASSU - RIO GRANDE DO NORTE": "Assú-RN",

    # --- Itajú do Colônia (BA) ---
    "ITAJU DO COLONIA BAHIA": "Itajú do Colônia-BA",

    # --- Jequié (BA) ---
    "JEQUIE BA": "Jequié-BA",

    # --- Casa Nova (BA) ---
    "CASA NOVA": "Casa Nova-BA",

    # --- Santa Inês (BA) ---
    "SANTA INES-BA": "Santa Inês-BA",

    # --- Filadélfia (BA) ---
    "FILADELFIA-BA": "Filadélfia-BA",
    "FILADELFIA - BA": "Filadélfia-BA",

    # --- Itiúba (BA) ---
    "ITIUBA BAHIA": "Itiúba-BA",
    "ITIUBA-BA": "Itiúba-BA",
    "ITIUBA - BA": "Itiúba-BA",

    # --- Teresina (PI) ---
    "TERESINA-PI": "Teresina-PI",
    "TERESINA, PI": "Teresina-PI",

    # --- Brasília (DF) ---
    "BRASILIA-DF": "Brasília-DF",

    # --- Anagé (BA) ---
    "ANAGE BAHIA": "Anagé-BA",

    # --- RegiÃO Nordeste (caso especial) ---
    "REGICAO NORDESTE": "Petrolina-PE",   # sua entrada veio como "REGIÇAO NORDESTE"

    # --- Fortaleza, Ceará (com vírgula) já coberto pelo normalizador acima ---
}

# aplicar o mapeamento
df["cidade_uf2"] = df["cidade_uf"].map(lambda x: over.get(norm_key(x), pd.NA))

# conferir o que ainda ficou sem padronizar
pendentes = (
    df.loc[df["cidade_uf2"].isna(), "cidade_uf"]
      .astype(str).str.strip()
      .value_counts()
      .reset_index().rename(columns={"index":"resposta","cidade_uf":"freq"})
)
pendentes.head(50)

# criaçao das variáveis cidade e estado

def split_cidade_estado(val):
    if pd.isna(val):
        return (pd.NA, pd.NA)
    s = str(val).strip()
    s_cf = s.casefold()

    # casos especiais
    if s_cf == "exterior":
        return ("Exterior", "Exterior")
    if s_cf == "nordeste":
        return ("Nordeste", "Nordeste")

    # Cidade-UF ou -UF
    m = re.match(r"^\s*(.*?)\s*-\s*([A-Za-z]{2})\s*$", s)
    if m:
        cidade = m.group(1).strip() or pd.NA
        uf = m.group(2).upper().strip()
        return (cidade, uf)
    return (pd.NA, pd.NA)

# aplica e cria as novas colunas
df[["cidade", "uf"]] = df["cidade_uf2"].apply(lambda x: pd.Series(split_cidade_estado(x)))
```

# Estatística Descritiva do Estado

```{python}
#| echo: true
(df["uf"].value_counts(normalize=True) * 100).round(1).astype(str) + "%"
```

```{python}
#import pandas as pd
from plotnine import *

# 1) preparar dados (percentuais por UF, ordenados)
dist = (
    df['uf'].fillna('Sem UF')                      # evita NaN aparecer na legenda
      .value_counts(dropna=False)
      .rename_axis('uf').reset_index(name='n')
)
dist['pct'] = dist['n'] / dist['n'].sum() * 100
dist = dist.sort_values('pct', ascending=False).reset_index(drop=True)

# manter ordem no eixo e na legenda
dist['uf'] = pd.Categorical(dist['uf'], categories=dist['uf'], ordered=True)
pad = max(1.0, dist['pct'].max() * 0.03)   # ~6% da barra mais alta ou 1.5, o maior
dist['label']  = dist['pct'].round(1).astype(str) + '%'
dist['y_text'] = dist['pct'] + pad
y_top = dist['y_text'].max() + pad          # garante folga no topo

plot = (
    ggplot(dist, aes(x='uf', y='pct', fill='uf'))
    + geom_col(width=0.75)
    + geom_text(aes(y='y_text', label='label'), va='bottom', size=13)
    + scale_y_continuous(
        limits=(0, y_top),                   # <<< evita cortar a 1ª etiqueta
        expand=(0, 0),
        labels=lambda v: [f'{x:.0f}%' for x in v]
    )
    + scale_x_discrete(expand=(0, 0)) 
    + labs(title='', x='', y='%', fill='UF')
    + theme(
        figure_size=(12, 8),
        legend_position='none',
        legend_direction='horizontal',
        legend_title=element_text(size=13),
        legend_text=element_text(size=13),
        axis_text_y=element_text(size=13),
        axis_text_x=element_text(size=13, angle=15, ha='right')
    )
)

plot.show()
```

```{python}
# tira espaços nas pontas (evita falhas de casca)
df["perfil"] = df["perfil"].astype(str).str.strip()

# mapeamentos desejados
mapping = {
    "Universidade/Pesquisador": "Universidade/IF/Pesquisador",
    "Professora": "Universidade/IF/Pesquisador",
    "Pesquisador aposentado": "Universidade/IF/Pesquisador",
    "Professor IF": "Universidade/IF/Pesquisador",
    "Analista da Embrapa": "Pesquisador/Analista da Embrapa",
    "Pesquisador da Embrapa": "Pesquisador/Analista da Embrapa",
    "GER. EXECUTIVO DO SINDICATO DOS PROD. RURAIS": "Outros",
    "GERENTE EXECUTIVO DO SINDICATO DOS PROD. RURAIS": "Outros",
    "BANCO DO NORDESTE DO BRASIL": "Outros",
    "Empresa Privada": "Outros", 
    "Terceiro Setor": "Outros", 
    "Sociedade civil organizada (ONGs, entidades representativas, movimentos sociais)": "Sociedade Civil Organizada",
    "Agropecuária": "Outros",# sugestão; troque aqui se preferir outro rótulo
}

df["perfil"] = df["perfil"].replace(mapping)

# normaliza espaços e bordas
#df["perfil"] = df["perfil"].astype(str).str.replace(r"\s+", " ", regex=True).str.strip()

# mapeia Empresa Privada -> Outros
#df["perfil"] = df["perfil"].replace({"Empresa Privada": "Outros"})

# conferir
#df["perfil"].value_counts()
```

# Estatística Descritiva do Perfil ou sua Organização

```{python}
(df["perfil"].value_counts(normalize=True) * 100).round(1).astype(str) + "%"
```

```{python}
#import pandas as pd
#from plotnine import *

# 1) preparar dados (percentuais por perfil, ordenados)
dist = (
    df['perfil'].fillna('Sem Perfil')                      # evita NaN aparecer na legenda
      .value_counts(dropna=False)
      .rename_axis('perfil').reset_index(name='n')
)
dist['pct'] = dist['n'] / dist['n'].sum() * 100
dist = dist.sort_values('pct', ascending=False).reset_index(drop=True)

# manter ordem no eixo e na legenda
dist['perfil'] = pd.Categorical(dist['perfil'], categories=dist['perfil'], ordered=True)
pad = max(1.0, dist['pct'].max() * 0.06)   # ~6% da barra mais alta ou 1.5, o maior
dist['label']  = dist['pct'].round(1).astype(str) + '%'
dist['y_text'] = dist['pct'] + pad
y_top = dist['y_text'].max() + pad          # garante folga no topo

plot = (
    ggplot(dist, aes(x='perfil', y='pct', fill='perfil'))
    + geom_col(width=0.75)
    + geom_text(aes(y='y_text', label='label'), va='bottom', size=13)
    + scale_y_continuous(
        limits=(0, y_top),                   # <<< evita cortar a 1ª etiqueta
        expand=(0, 0),
        labels=lambda v: [f'{x:.0f}%' for x in v]
    )
    + scale_x_discrete(expand=(0, 0)) 
    + labs(title='', x='', y='%', fill='PERFIL')
    + theme(
        figure_size=(12, 8),
        legend_position='none',
        legend_direction='horizontal',
        legend_title=element_text(size=13),
        legend_text=element_text(size=13),
        axis_text_y=element_text(size=13),
        axis_text_x=element_text(size=13, angle=45, ha='right')
    )
)

plot.show()
```

# Estatística Descritiva do Perfil X Estado (%)

```{python}
# ordem das colunas (UF). Pode ser alfabética ou pela frequência geral
uf_order = sorted(df["uf"].dropna().unique().tolist())
# ou: uf_order = df["uf"].value_counts().index.tolist()

# % por perfil (cada linha soma 100)
ct_pct = pd.crosstab(
    df["perfil"],   # linhas
    df["uf"],       # colunas
    normalize="index"
).reindex(columns=uf_order, fill_value=0).mul(100).round(1)

# (opcional) formato "x.x%"
ct_pct_fmt = ct_pct.map(lambda x: f"{x:.1f}")

ct_pct_fmt  # tabela pronta

```

# Percepção sobre o desempenho, a competência e o impacto da Embrapa Semiárido no setor agropecuário 

## Estatística sobre a qualidade da pesquisa e inovação desenvolvida pela Embrapa Semiárido

```{python}
ordem = ["Não tenho opinião", "Muito Ruim","Ruim","Regular","Boa","Excelente"]
map_q = {k:i for i,k in enumerate(ordem)}          # Muito Ruim=0 … Excelente=4
df["qualidade_pesq_code"] = df["qualidade_pesq"].map(map_q).astype("Int64")
#df[["qualidade_pesq","qualidade_pesq_code"]].head()
```

```{python}
(df["qualidade_pesq"].value_counts(normalize=True) * 100).round(1).astype(str) + "%"
```

```{python}
# 1) preparar dados (percentuais por qualidade_pesq, ordenados)
dist = (
    df['qualidade_pesq'].fillna('Sem Resposta')                      # evita NaN aparecer na legenda
      .value_counts(dropna=False)
      .rename_axis('qualidade_pesq').reset_index(name='n')
)
dist['pct'] = dist['n'] / dist['n'].sum() * 100
dist = dist.sort_values('pct', ascending=False).reset_index(drop=True)

# manter ordem no eixo e na legenda
dist['qualidade_pesq'] = pd.Categorical(dist['qualidade_pesq'], categories=dist['qualidade_pesq'], ordered=True)
pad = max(1.0, dist['pct'].max() * 0.04)   # ~6% da barra mais alta ou 1.5, o maior
dist['label']  = dist['pct'].round(1).astype(str) + '%'
dist['y_text'] = dist['pct'] + pad
y_top = dist['y_text'].max() + pad          # garante folga no topo

plot = (
    ggplot(dist, aes(x='qualidade_pesq', y='pct', fill='qualidade_pesq'))
    + geom_col(width=0.75)
    + geom_text(aes(y='y_text', label='label'), va='bottom', size=13)
    + scale_y_continuous(
        limits=(0, y_top),                   # <<< evita cortar a 1ª etiqueta
        expand=(0, 0),
        labels=lambda v: [f'{x:.0f}%' for x in v]
    )
    + scale_x_discrete(expand=(0, 0)) 
    + labs(title='Qualidade da Pesquisa', x='', y='%', fill='QUALIDADE DA PESQUISA')
    + theme(
        figure_size=(12, 8),
        legend_position='none',
        legend_direction='horizontal',
        legend_title=element_text(size=13),
        legend_text=element_text(size=13),
        axis_text_y=element_text(size=13),
        axis_text_x=element_text(size=13, angle=45, ha='right')
    )
)

plot.show()
```

### Estatística Descritiva do Perfil x Qualidade Pesquisa (%)

```{python}
ordem = ["Não tenho opinião", "Muito Ruim","Ruim","Regular","Boa","Excelente"]
ct_pct = pd.crosstab(
    df["perfil"],
    pd.Categorical(df["qualidade_pesq"], categories=ordem, ordered=True),
    normalize="index"            # fração por linha
).reindex(columns=ordem, fill_value=0).mul(100).round(1)

ct_pct  # -> números (ex.: 42.5). Se quiser “%”:
ct_pct_fmt = ct_pct.applymap(lambda x: f"{x:.1f}")
ct_pct_fmt_desc = ct_pct_fmt.reindex(columns=ordem[::-1])
ct_pct_fmt_desc
```

### Estatística Descritiva do Estado x Qualidade Pesquisa (%)

```{python}
ordem = ["Não tenho opinião", "Muito Ruim","Ruim","Regular","Boa","Excelente"]
ct_pct = pd.crosstab(
    df["uf"],
    pd.Categorical(df["qualidade_pesq"], categories=ordem, ordered=True),
    normalize="index"            # fração por linha
).reindex(columns=ordem, fill_value=0).mul(100).round(1)

ct_pct  # -> números (ex.: 42.5). Se quiser “%”:
ct_pct_fmt = ct_pct.applymap(lambda x: f"{x:.1f}")
ct_pct_fmt_desc = ct_pct_fmt.reindex(columns=ordem[::-1])
ct_pct_fmt_desc
```

## Nível de relevância das soluções e tecnologias que a Embrapa Semiárido tem  oferecido

```{python}
ordem = ["Nenhuma Relevância","Baixa Relevância","Média Relevância","Alta Relevância","Essencial","Não tenho opinião"]
map_q = {k:i for i,k in enumerate(ordem)}          # Muito Ruim=0 … Excelente=4
df["relevancia_solucoes_code"] = df["relevancia_solucoes"].map(map_q).astype("Int64")
```

```{python}
(df["relevancia_solucoes"].value_counts(normalize=True) * 100).round(1).astype(str) + "%"
```

```{python}
# 1) preparar dados (percentuais por qualidade_pesq, ordenados)
dist = (
    df['relevancia_solucoes'].fillna('Sem Resposta')                      # evita NaN aparecer na legenda
      .value_counts(dropna=False)
      .rename_axis('relevancia_solucoes').reset_index(name='n')
)
dist['pct'] = dist['n'] / dist['n'].sum() * 100
dist = dist.sort_values('pct', ascending=False).reset_index(drop=True)

# manter ordem no eixo e na legenda
dist['relevancia_solucoes'] = pd.Categorical(dist['relevancia_solucoes'], categories=dist['relevancia_solucoes'], ordered=True)
pad = max(1.0, dist['pct'].max() * 0.04)   # ~6% da barra mais alta ou 1.5, o maior
dist['label']  = dist['pct'].round(1).astype(str) + '%'
dist['y_text'] = dist['pct'] + pad
y_top = dist['y_text'].max() + pad          # garante folga no topo

plot = (
    ggplot(dist, aes(x='relevancia_solucoes', y='pct', fill='relevancia_solucoes'))
    + geom_col(width=0.75)
    + geom_text(aes(y='y_text', label='label'), va='bottom', size=13)
    + scale_y_continuous(
        limits=(0, y_top),                   # <<< evita cortar a 1ª etiqueta
        expand=(0, 0),
        labels=lambda v: [f'{x:.0f}%' for x in v]
    )
    + scale_x_discrete(expand=(0, 0)) 
    + labs(title='Relevância das Soluções', x='', y='%', fill='RELEVÂNCIA DAS SOLUÇÕES')
    + theme(
        figure_size=(12, 8),
        legend_position='none',
        legend_direction='horizontal',
        legend_title=element_text(size=13),
        legend_text=element_text(size=13),
        axis_text_y=element_text(size=13),
        axis_text_x=element_text(size=13, angle=45, ha='right')
    )
)

plot.show()
```

## Agilidade da Embrapa Semiárido em responder às demandas e desafios

```{python}
ordem = ["Muito Lenta","Lenta","Regular","Ágil","Muito Ágil","Não tenho opinião"]
map_q = {k:i for i,k in enumerate(ordem)}          # Muito Ruim=0 … Excelente=4
df["agilidade_respostas_code"] = df["agilidade_respostas"].map(map_q).astype("Int64")
```

```{python}
(df["agilidade_respostas"].value_counts(normalize=True) * 100).round(1).astype(str) + "%"
```

```{python}
# 1) preparar dados (percentuais por qualidade_pesq, ordenados)
dist = (
    df['agilidade_respostas'].fillna('Sem Resposta')                      # evita NaN aparecer na legenda
      .value_counts(dropna=False)
      .rename_axis('agilidade_respostas').reset_index(name='n')
)
dist['pct'] = dist['n'] / dist['n'].sum() * 100
dist = dist.sort_values('pct', ascending=False).reset_index(drop=True)

# manter ordem no eixo e na legenda
dist['agilidade_respostas'] = pd.Categorical(dist['agilidade_respostas'], categories=dist['agilidade_respostas'], ordered=True)
pad = max(1.0, dist['pct'].max() * 0.04)   # ~6% da barra mais alta ou 1.5, o maior
dist['label']  = dist['pct'].round(1).astype(str) + '%'
dist['y_text'] = dist['pct'] + pad
y_top = dist['y_text'].max() + pad          # garante folga no topo

plot = (
    ggplot(dist, aes(x='agilidade_respostas', y='pct', fill='agilidade_respostas'))
    + geom_col(width=0.75)
    + geom_text(aes(y='y_text', label='label'), va='bottom', size=13)
    + scale_y_continuous(
        limits=(0, y_top),                   # <<< evita cortar a 1ª etiqueta
        expand=(0, 0),
        labels=lambda v: [f'{x:.0f}%' for x in v]
    )
    + scale_x_discrete(expand=(0, 0)) 
    + labs(title='Agilidade das Respostas', x='', y='%', fill='AGILIDADE DAS RESPOSTAS')
    + theme(
        figure_size=(12, 8),
        legend_position='none',
        legend_direction='horizontal',
        legend_title=element_text(size=13),
        legend_text=element_text(size=13),
        axis_text_y=element_text(size=13),
        axis_text_x=element_text(size=13, angle=45, ha='right')
    )
)

plot.show()
```

## Conhecimento técnico da equipe da Embrapa Semiárido

```{python}
ordem = ["Muito Insuficiente","Insuficiente","Adequado","Forte","Excepcional","Não tenho opinião"]
map_q = {k:i for i,k in enumerate(ordem)}          # Muito Ruim=0 … Excelente=4
df["conhecimento_tecnico_code"] = df["conhecimento_tecnico"].map(map_q).astype("Int64")
```

```{python}
(df["conhecimento_tecnico"].value_counts(normalize=True) * 100).round(1).astype(str) + "%"
```

```{python}
# 1) preparar dados (percentuais por qualidade_pesq, ordenados)
dist = (
    df['conhecimento_tecnico'].fillna('Sem Resposta')                      # evita NaN aparecer na legenda
      .value_counts(dropna=False)
      .rename_axis('conhecimento_tecnico').reset_index(name='n')
)
dist['pct'] = dist['n'] / dist['n'].sum() * 100
dist = dist.sort_values('pct', ascending=False).reset_index(drop=True)

# manter ordem no eixo e na legenda
dist['conhecimento_tecnico'] = pd.Categorical(dist['conhecimento_tecnico'], categories=dist['conhecimento_tecnico'], ordered=True)
pad = max(1.0, dist['pct'].max() * 0.04)   # ~6% da barra mais alta ou 1.5, o maior
dist['label']  = dist['pct'].round(1).astype(str) + '%'
dist['y_text'] = dist['pct'] + pad
y_top = dist['y_text'].max() + pad          # garante folga no topo

plot = (
    ggplot(dist, aes(x='conhecimento_tecnico', y='pct', fill='conhecimento_tecnico'))
    + geom_col(width=0.75)
    + geom_text(aes(y='y_text', label='label'), va='bottom', size=13)
    + scale_y_continuous(
        limits=(0, y_top),                   # <<< evita cortar a 1ª etiqueta
        expand=(0, 0),
        labels=lambda v: [f'{x:.0f}%' for x in v]
    )
    + scale_x_discrete(expand=(0, 0)) 
    + labs(title='Conhecimento Técnico da Equipe', x='', y='%', fill='CONHECIMENTO TÉCNICO')
    + theme(
        figure_size=(12, 8),
        legend_position='none',
        legend_direction='horizontal',
        legend_title=element_text(size=13),
        legend_text=element_text(size=13),
        axis_text_y=element_text(size=13),
        axis_text_x=element_text(size=13, angle=45, ha='right')
    )
)

plot.show()
```

## Interação da equipe técnica da Embrapa Semiárido com os membros do setor agropecuário

```{python}
ordem = ["Muito Insuficiente","Insuficiente","Adequado","Forte","Excepcional","Não tenho opinião"]
map_q = {k:i for i,k in enumerate(ordem)}          # Muito Ruim=0 … Excelente=4
df["interacao_agro_code"] = df["interacao_agro"].map(map_q).astype("Int64")
```

```{python}
(df["interacao_agro"].value_counts(normalize=True) * 100).round(1).astype(str) + "%"
```

```{python}
# 1) preparar dados (percentuais por qualidade_pesq, ordenados)
dist = (
    df['interacao_agro'].fillna('Sem Resposta')                      # evita NaN aparecer na legenda
      .value_counts(dropna=False)
      .rename_axis('interacao_agro').reset_index(name='n')
)
dist['pct'] = dist['n'] / dist['n'].sum() * 100
dist = dist.sort_values('pct', ascending=False).reset_index(drop=True)

# manter ordem no eixo e na legenda
dist['interacao_agro'] = pd.Categorical(dist['interacao_agro'], categories=dist['interacao_agro'], ordered=True)
pad = max(1.0, dist['pct'].max() * 0.04)   # ~6% da barra mais alta ou 1.5, o maior
dist['label']  = dist['pct'].round(1).astype(str) + '%'
dist['y_text'] = dist['pct'] + pad
y_top = dist['y_text'].max() + pad          # garante folga no topo

plot = (
    ggplot(dist, aes(x='interacao_agro', y='pct', fill='interacao_agro'))
    + geom_col(width=0.75)
    + geom_text(aes(y='y_text', label='label'), va='bottom', size=13)
    + scale_y_continuous(
        limits=(0, y_top),                   # <<< evita cortar a 1ª etiqueta
        expand=(0, 0),
        labels=lambda v: [f'{x:.0f}%' for x in v]
    )
    + scale_x_discrete(expand=(0, 0)) 
    + labs(title='Interação da equipe técnica com o Agro', x='', y='%', fill='INTERAÇAO TÉCNICA')
    + theme(
        figure_size=(12, 8),
        legend_position='none',
        legend_direction='horizontal',
        legend_title=element_text(size=13),
        legend_text=element_text(size=13),
        axis_text_y=element_text(size=13),
        axis_text_x=element_text(size=13, angle=45, ha='right')
    )
)

plot.show()
```

## Comunicação da Embrapa Semiárido sobre suas tecnologias

```{python}
ordem = ["Muito Ineficaz","Ineficaz","Regular","Eficaz","Muito Eficaz","Não tenho opinião"]
map_q = {k:i for i,k in enumerate(ordem)}          # Muito Ruim=0 … Excelente=4
df["comunicacao_code"] = df["comunicacao"].map(map_q).astype("Int64")
```

```{python}
(df["comunicacao"].value_counts(normalize=True) * 100).round(1).astype(str) + "%"
```

```{python}
# 1) preparar dados (percentuais por qualidade_pesq, ordenados)
dist = (
    df['comunicacao'].fillna('Sem Resposta')                      # evita NaN aparecer na legenda
      .value_counts(dropna=False)
      .rename_axis('comunicacao').reset_index(name='n')
)
dist['pct'] = dist['n'] / dist['n'].sum() * 100
dist = dist.sort_values('pct', ascending=False).reset_index(drop=True)

# manter ordem no eixo e na legenda
dist['comunicacao'] = pd.Categorical(dist['comunicacao'], categories=dist['comunicacao'], ordered=True)
pad = max(1.0, dist['pct'].max() * 0.04)   # ~6% da barra mais alta ou 1.5, o maior
dist['label']  = dist['pct'].round(1).astype(str) + '%'
dist['y_text'] = dist['pct'] + pad
y_top = dist['y_text'].max() + pad          # garante folga no topo

plot = (
    ggplot(dist, aes(x='comunicacao', y='pct', fill='comunicacao'))
    + geom_col(width=0.75)
    + geom_text(aes(y='y_text', label='label'), va='bottom', size=13)
    + scale_y_continuous(
        limits=(0, y_top),                   # <<< evita cortar a 1ª etiqueta
        expand=(0, 0),
        labels=lambda v: [f'{x:.0f}%' for x in v]
    )
    + scale_x_discrete(expand=(0, 0)) 
    + labs(title='Comunicação sobre suas tecnologias', x='', y='%', fill='COMUNICAÇÃO TECNOLOGIAS')
    + theme(
        figure_size=(12, 8),
        legend_position='none',
        legend_direction='horizontal',
        legend_title=element_text(size=13),
        legend_text=element_text(size=13),
        axis_text_y=element_text(size=13),
        axis_text_x=element_text(size=13, angle=45, ha='right')
    )
)

plot.show()
```

# Oportunidades e prioridades para o desenvolvimento tecnológico e de inovação, bem como os riscos iminentes que demandam atenção imediata

## Oportunidades tecnológicas na agricultura irrigada que devem ser priorizadas

```{python}
#import re, unicodedata
#import pandas as pd

# --- as 7 opções válidas, exatamente como você quer ver nas colunas ---
valid_opts = [
    "Desenvolvimento de sensores e tecnologias para uma irrigação inteligente e eficiente",
    "Criação de Bases de dados e integração solo-planta-fertilizantes para otimização do manejo de fertilizantes",
    "Melhoramento genético e variedades adaptadas e tolerantes a estresses bióticos e abióticos",
    "Tecnologias de manejo fitossanitário de precisão, controle biológico de pragas e detecção precoce de doenças",
    "Práticas de manejo do solo e uso de microrganismos para aumentar fertilidade e reduzir pegada hídrica e de carbono",
]

def norm(s: str) -> str:
    s = "".join(ch for ch in unicodedata.normalize("NFKD", str(s)) if not unicodedata.combining(ch))
    s = s.casefold().strip()
    s = re.sub(r"\s+", " ", s)
    return s

valid_norm = {norm(v): v for v in valid_opts}

def split_opcions_with_commas(raw):
    # saída default
    out = [pd.NA, pd.NA, pd.NA, pd.NA]
    if pd.isna(raw) or not str(raw).strip():
        return pd.Series(out, index=["oportunidades_1","oportunidades_2","oportunidades_3","oportunidades_4"])

    # 1) dividir pela vírgula (forms/Excel)
    parts = [p.strip() for p in str(raw).split(",")]

    # 2) juntar blocos consecutivos até bater numa opção válida normalizada
    rec, unk = [], []
    i, n = 0, len(parts)
    while i < n:
        matched = False
        # tenta juntar de i..j, crescendo j
        for j in range(i, n):
            candidate = ", ".join(parts[i:j+1]).strip()
            if norm(candidate) in valid_norm:
                rec.append(valid_norm[norm(candidate)])
                i = j + 1
                matched = True
                break
        if not matched:
            # não formou nenhuma opção válida — este pedaço é desconhecido;
            # (tente absorver só 1 part; o próximo a gente tenta de novo)
            unk.append(parts[i])
            i += 1

    # 3) preencher colunas conforme a regra
    for k in range(min(3, len(rec))):
        out[k] = rec[k]

    if unk:
        # qualquer coisa não listada vai para a 4ª
        out[3] = " | ".join([u for u in unk if u])
    elif len(rec) > 3:
        # se não houver desconhecidas, a(s) válidas extra(s) vão para a 4ª
        out[3] = " | ".join(rec[3:])

    return pd.Series(out, index=["oportunidades_1","oportunidades_2","oportunidades_3","oportunidades_4"])

# 4) aplicar
df[["oportunidades_1","oportunidades_2","oportunidades_3","oportunidades_4"]] = (
    df["oportunidades"].apply(split_opcions_with_commas)
)

```

```{python}
#import re, unicodedata
#import pandas as pd

# --- mapeamento: rótulo completo -> nome da dummy ---
rotulo_para_dummy = {
    # 5 oficiais:
    "Desenvolvimento de sensores e tecnologias para uma irrigação inteligente e eficiente": "irriga_inteligente",
    "Criação de Bases de dados e integração solo-planta-fertilizantes para otimização do manejo de fertilizantes": "base_dados_fertiliza",
    "Melhoramento genético e variedades adaptadas e tolerantes a estresses bióticos e abióticos": "melhoramento_estresses",
    "Tecnologias de manejo fitossanitário de precisão, controle biológico de pragas e detecção precoce de doenças": "manejo_fito",
    "Práticas de manejo do solo e uso de microrganismos para aumentar fertilidade e reduzir pegada hídrica e de carbono": "manejo_solo",
    # 5 extras:
    "Variedades com todas as caraterísticas acima e ainda que atendam as exigências do mercado": "variedades",
    "Tecnologia para adpatar-se ao aquecimento do clima.": "tecnol_clima",
    "Atualizar muitos dados tem muita coisas que já tá a frente da Embrapa a muitos anos principalmente na manga tem muitas pesquisas feita na clorofila agropecuária que Embrapa nem sabe...": "atualizar_dados",
    "Desenvolvimento e adaptação de máquinas e ou implementos agrícolas que atenda as necessidades da médio e pequeno produtores": "maquinas_pequenos",
    "Agricultura Biossalina": "agr_biossalina",
}

# normalizador (tira acento/caixa e compacta espaços)
def norm(s: str) -> str:
    s = "".join(ch for ch in unicodedata.normalize("NFKD", str(s)) if not unicodedata.combining(ch))
    s = s.casefold()
    s = re.sub(r"\s+", " ", s).strip()
    return s

# versões normalizadas das chaves
normkey_to_dummy = {norm(k): v for k, v in rotulo_para_dummy.items()}

# helper: pega todas as seleções da linha (1..3 + cada item de _4)
def coletar_selecoes(row):
    itens = []
    for c in ["oportunidades_1","oportunidades_2","oportunidades_3"]:
        v = row.get(c, pd.NA)
        if pd.notna(v) and str(v).strip():
            itens.append(str(v))
    v4 = row.get("oportunidades_4", pd.NA)
    if pd.notna(v4) and str(v4).strip():
        # _4 pode ter múltiplos, separados por " | "
        for t in str(v4).split("|"):
            t = t.strip()
            if t:
                itens.append(t)
    return [norm(x) for x in itens]

# cria todas as dummies (0/1)
all_norm_cols = df.apply(coletar_selecoes, axis=1)

for nk, dummy_name in normkey_to_dummy.items():
    df[dummy_name] = all_norm_cols.apply(lambda lst: int(nk in lst))

# checagens rápidas
dummy_cols = list(normkey_to_dummy.values())
#print("Criadas:", dummy_cols)
#print("Somas (quantos marcaram cada opção):")
#print(df[dummy_cols].sum().sort_values(ascending=False))

```

```{python}
# série com as proporções
s = (df[dummy_cols].mean()*100).round(1).sort_values(ascending=False)

# vira DataFrame com 2 colunas
tabela = s.rename_axis("opcao").reset_index(name="perc")
tabela

```

## Riscos na agricultura irrigada merecem atenção imediata

```{python}
import re, unicodedata
import pandas as pd

valid_opts = [
    "A escassez, a variabilidade hídrica e os eventos climáticos extremos representam desafios para a produção agrícola",
    "O uso ineficiente da água, que pode proporcionar a degradação ambiental e aumentar a escassez de recursos hídricos",
    "A ausência de sensores confiáveis e de sistemas inteligentes de irrigação que  limitam a eficiência no uso da água e a competitividade do produtor",
    "A redução da disponibilidade de mão-de-obra para trabalhos em atividades operacionais de campo",
    "As perdas pós-colheita e a baixa resistência das frutas ao transporte a longas distâncias comprometem a competitividade",
    "A vulnerabilidade a pragas, doenças, estresses bióticos/abióticos e a falta de automação na colheita e avaliação de qualidade são entraves à produção",
]

def norm(s: str) -> str:
    s = "".join(ch for ch in unicodedata.normalize("NFKD", str(s)) if not unicodedata.combining(ch))
    s = s.casefold().strip()
    s = re.sub(r"\s+", " ", s)
    return s

valid_norm = {norm(v): v for v in valid_opts}

def split_riscos_with_commas(raw):
    out = [pd.NA, pd.NA, pd.NA, pd.NA]
    if pd.isna(raw) or not str(raw).strip():
        return pd.Series(out, index=["riscos_1","riscos_2","riscos_3","riscos_4"])

    # 1) normalizar separadores: transforma ; e quebras de linha em vírgula
    txt = str(raw).replace(";", ",")
    txt = re.sub(r"[\r\n]+", ",", txt)

    # 2) split por vírgula e limpeza de bullets/hífens
    parts = [re.sub(r"^[\-\•]\s*", "", p.strip()) for p in txt.split(",")]
    parts = [p for p in parts if p]  # remove vazios

    # 3) “parser por blocos” até bater exatamente numa opção válida
    rec, unk, vistos = [], [], set()
    i, n = 0, len(parts)
    while i < n:
        matched = False
        for j in range(i, n):
            candidate = ", ".join(parts[i:j+1]).strip()
            key = norm(candidate)
            if key in valid_norm:
                lab = valid_norm[key]
                if lab not in vistos:
                    rec.append(lab); vistos.add(lab)
                i = j + 1
                matched = True
                break
        if not matched:
            unk.append(parts[i])
            i += 1

    # 4) preencher 1–3 com válidas (na ordem)
    for k in range(min(3, len(rec))):
        out[k] = rec[k]

    # 5) riscos_4 = desconhecidas (se houver) SENÃO válidas extras (4ª+)
    if unk:
        out[3] = " | ".join(dict.fromkeys(unk))
    elif len(rec) > 3:
        out[3] = " | ".join(rec[3:])

    return pd.Series(out, index=["riscos_1","riscos_2","riscos_3","riscos_4"])

# aplicar
df[["riscos_1","riscos_2","riscos_3","riscos_4"]] = df["riscos"].apply(split_riscos_with_commas)

```

```{python}
#import re, unicodedata
#import pandas as pd

# --- mapeamento: rótulo completo -> nome da dummy (edite os nomes se preferir) ---
rotulo_para_dummy_riscos = {
    "A escassez, a variabilidade hídrica e os eventos climáticos extremos representam desafios para a produção agrícola": "risco_clima",
    "O uso ineficiente da água, que pode proporcionar a degradação ambiental e aumentar a escassez de recursos hídricos": "inefic_agua",
    "A ausência de sensores confiáveis e de sistemas inteligentes de irrigação que  limitam a eficiência no uso da água e a competitividade do produtor": "ausencia_sensores",
    "A redução da disponibilidade de mão-de-obra para trabalhos em atividades operacionais de campo": "reducao_maodeobra",
    "As perdas pós-colheita e a baixa resistência das frutas ao transporte a longas distâncias comprometem a competitividade": "resistencias_pos_colhe",
    "A vulnerabilidade a pragas, doenças, estresses bióticos/abióticos e a falta de automação na colheita e avaliação de qualidade são entraves à produção": "vulnerab_pragas",
    "Resistência de pragas e doenças aos defensivos.": "resist_pragas",
}

# normalizador (tira acento/caixa e compacta espaços)
def norm(s: str) -> str:
    s = "".join(ch for ch in unicodedata.normalize("NFKD", str(s)) if not unicodedata.combining(ch))
    s = s.casefold()
    s = re.sub(r"\s+", " ", s).strip()
    return s

# versões normalizadas das chaves
normkey_to_dummy_riscos = {norm(k): v for k, v in rotulo_para_dummy_riscos.items()}

# helper: pega as seleções da linha (somente riscos_1.._3; ignoramos riscos_4 pois é NA)
def coletar_riscos(row):
    itens = []
    for c in ["riscos_1","riscos_2","riscos_3","riscos_4"]:
        v = row.get(c, pd.NA)
        if pd.notna(v) and str(v).strip():
            itens.append(str(v))
    return [norm(x) for x in itens]

# cria as 7 dummies (0/1)
all_norm = df.apply(coletar_riscos, axis=1)

for nk, dummy_name in normkey_to_dummy_riscos.items():
    df[dummy_name] = all_norm.apply(lambda lst: int(nk in lst))

# checagem rápida
dummy_riscos = list(normkey_to_dummy_riscos.values())
print("Criadas:", dummy_riscos)
print("Somas (quantos marcaram cada risco):")
print(df[dummy_riscos].sum().sort_values(ascending=False))
```

```{python}
# série com as proporções (%)
r = (df[dummy_riscos].mean() * 100).round(1).sort_values(ascending=False)

# vira DataFrame com 2 colunas (opcao, perc)
tabela = r.rename_axis("opcao").reset_index(name="perc")
tabela
```

## Grau de importância que atribui para os temas abaixo relacionados

```{python}
#import re, unicodedata
#import pandas as pd

# 1) suas colunas Likert
cols = [
'importancia_melhoramento','importancia_manejo_agua','importancia_manejo_doencas','importancia_manejo_pragas','importancia_sistemas_prod','importancia_monit_gases','importancia_ferramentas_biotec','importancia_tecno_alimen','importancia_poscolheita','importancia_mercado',
]

# 2) normalizador (remove acentos, baixa caixa, comprime espaços)
def norm(s):
    if pd.isna(s): return s
    s = "".join(ch for ch in unicodedata.normalize("NFKD", str(s)) if not unicodedata.combining(ch))
    s = re.sub(r"\s+", " ", s.casefold().strip())
    return s

# 3) escolha de tratamento para "Não sei"
USE_NA_FOR_NAO_SEI = False  # True -> NA ; False -> 0

LIKERT_MAP = {
    "muito importante": 3,
    "moderadamente importante": 2,
    "pouco importante": 1,
    "nao sei": (pd.NA if USE_NA_FOR_NAO_SEI else 0),
}

# 4) aplicar em todas as colunas
unmapped_report = {}  # para checagem
for col in cols:
    # backup do rótulo original
    df[col + "_label"] = df[col]

    # mapeamento robusto
    df[col + "_code"] = (
        df[col].map(lambda x: LIKERT_MAP.get(norm(x), pd.NA))
               .astype("Int64")
    )

    # diagnosticar valores não mapeados (se houver)
    vals = df[col].dropna().unique().tolist()
    not_mapped = sorted({v for v in vals if LIKERT_MAP.get(norm(v), None) is None})
    if not_mapped:
        unmapped_report[col] = not_mapped

# 5) ver se sobrou algo não mapeado
#unmapped_report  # dict vazio = tudo ok
```

```{python}
import pandas as pd

# suas colunas Likert
cols = [
'importancia_melhoramento','importancia_manejo_agua','importancia_manejo_doencas','importancia_manejo_pragas','importancia_sistemas_prod','importancia_monit_gases','importancia_ferramentas_biotec','importancia_tecno_alimen','importancia_poscolheita','importancia_mercado',
]

# ordem da escala (Não sei = 0 no seu mapeamento, mas aqui usamos os rótulos)
ordem = ["Muito importante", "Moderadamente importante", "Pouco importante", "Não sei"]

rows = []
for col in cols:
    s = df[col + "_label"].astype(pd.CategoricalDtype(categories=ordem, ordered=True))
    vc = s.value_counts(dropna=False, sort=False)  # já na ordem definida
    total = int(vc.sum())
    for cat in ordem:
        n = int(vc.get(cat, 0))
        perc = round(n / total * 100, 1) if total > 0 else pd.NA
        rows.append({"variavel": col, "categoria": cat, "perc": perc})

tabela_props = pd.DataFrame(rows)
#tabela_props
```

```{python}
tabela_wide = (
    tabela_props.pivot(index="variavel", columns="categoria", values="perc")
                .reindex(columns=ordem)   # garante ordem das colunas
                .reset_index()
)
tabela_wide
```

## Grau de satisfação com atuação da Embrapa no desenvolvimento de tecnologias nas temáticas abaixo relacionadas

```{python}
#import re, unicodedata
#import pandas as pd

# 1) suas colunas Likert
cols = [
'satisfacao_melhoramento','satisfacao_manejo_agua','satisfacao_manejo_doencas','satisfacao_manejo_pragas',
    'satisfacao_sistemas_prod','satisfacao_monit_gases','satisfacao_ferramentas_biotec','satisfacao_tecno_alimen',
    'satisfacao_poscolheita','satisfacao_mercado',
]

# 2) normalizador (remove acentos, baixa caixa, comprime espaços)
def norm(s):
    if pd.isna(s): return s
    s = "".join(ch for ch in unicodedata.normalize("NFKD", str(s)) if not unicodedata.combining(ch))
    s = re.sub(r"\s+", " ", s.casefold().strip())
    return s

# 3) escolha de tratamento para "Não sei"
USE_NA_FOR_NAO_SEI = False  # True -> NA ; False -> 0

LIKERT_MAP = {
    "totalmente satisfeito": 5,
    "satisfeito": 4,
    "nem satisfeito nem insatisfeito": 3,
    "insatisfeito": 2,
    "totalmente insatisfeito": 1,
    "nao sei": (pd.NA if USE_NA_FOR_NAO_SEI else 0),
}

# 4) aplicar em todas as colunas
unmapped_report = {}  # para checagem
for col in cols:
    # backup do rótulo original
    df[col + "_label"] = df[col]

    # mapeamento robusto
    df[col + "_code"] = (
        df[col].map(lambda x: LIKERT_MAP.get(norm(x), pd.NA))
               .astype("Int64")
    )

    # diagnosticar valores não mapeados (se houver)
    vals = df[col].dropna().unique().tolist()
    not_mapped = sorted({v for v in vals if LIKERT_MAP.get(norm(v), None) is None})
    if not_mapped:
        unmapped_report[col] = not_mapped

# 5) ver se sobrou algo não mapeado
#unmapped_report  # dict vazio = tudo ok
```

```{python}
#import pandas as pd

# suas colunas Likert
cols = [
'satisfacao_melhoramento','satisfacao_manejo_agua','satisfacao_manejo_doencas','satisfacao_manejo_pragas',
    'satisfacao_sistemas_prod','satisfacao_monit_gases','satisfacao_ferramentas_biotec','satisfacao_tecno_alimen',
    'satisfacao_poscolheita','satisfacao_mercado',
]

# ordem da escala (Não sei = 0 no seu mapeamento, mas aqui usamos os rótulos)
ordem = ["Totalmente satisfeito", "Satisfeito", "Nem satisfeito nem insatisfeito", "Insatisfeito", "Totalmente insatisfeito", "Não sei"]

rows = []
for col in cols:
    s = df[col + "_label"].astype(pd.CategoricalDtype(categories=ordem, ordered=True))
    vc = s.value_counts(dropna=False, sort=False)  # já na ordem definida
    total = int(vc.sum())
    for cat in ordem:
        n = int(vc.get(cat, 0))
        perc = round(n / total * 100, 1) if total > 0 else pd.NA
        rows.append({"variavel": col, "categoria": cat, "n": n, "perc": perc})

tabela_props = pd.DataFrame(rows)
#tabela_props
```

```{python}
tabela_wide2 = (
    tabela_props.pivot(index="variavel", columns="categoria", values="perc")
                .reindex(columns=ordem)   # garante ordem das colunas
                .reset_index()
)
tabela_wide2
```


# Contribuição da Embrapa Semiárido para o desenvolvimento agropecuário do país

```{python}
ordem = ["Muito relevante","Razoavelmente relevante","Pouco relevante","Não é relevante","Não conheço o suficiente para opinar"]
map_q = {k:i for i,k in enumerate(ordem)}          # Muito Ruim=0 … Excelente=4
df["contribuicao_sociedade_code"] = df["contribuicao_sociedade"].map(map_q).astype("Int64")
```

```{python}
(df["contribuicao_sociedade"].value_counts(normalize=True) * 100).round(1).astype(str) + "%"
```

```{python}
# 1) preparar dados (percentuais por qualidade_pesq, ordenados)
dist = (
    df['contribuicao_sociedade'].fillna('Sem Resposta')                      # evita NaN aparecer na legenda
      .value_counts(dropna=False)
      .rename_axis('contribuicao_sociedade').reset_index(name='n')
)
dist['pct'] = dist['n'] / dist['n'].sum() * 100
dist = dist.sort_values('pct', ascending=False).reset_index(drop=True)

# manter ordem no eixo e na legenda
dist['contribuicao_sociedade'] = pd.Categorical(dist['contribuicao_sociedade'], categories=dist['contribuicao_sociedade'], ordered=True)
pad = max(1.0, dist['pct'].max() * 0.04)   # ~6% da barra mais alta ou 1.5, o maior
dist['label']  = dist['pct'].round(1).astype(str) + '%'
dist['y_text'] = dist['pct'] + pad
y_top = dist['y_text'].max() + pad          # garante folga no topo

plot = (
    ggplot(dist, aes(x='contribuicao_sociedade', y='pct', fill='contribuicao_sociedade'))
    + geom_col(width=0.75)
    + geom_text(aes(y='y_text', label='label'), va='bottom', size=13)
    + scale_y_continuous(
        limits=(0, y_top),                   # <<< evita cortar a 1ª etiqueta
        expand=(0, 0),
        labels=lambda v: [f'{x:.0f}%' for x in v]
    )
    + scale_x_discrete(expand=(0, 0)) 
    + labs(title='Contribuição para o Desenvolvimento', x='', y='%', fill='CONTRIBUIÇÃO PARA O PAÍS')
    + theme(
        figure_size=(12, 8),
        legend_position='none',
        legend_direction='horizontal',
        legend_title=element_text(size=13),
        legend_text=element_text(size=13),
        axis_text_y=element_text(size=13),
        axis_text_x=element_text(size=13, angle=45, ha='right')
    )
)

plot.show()
```

# Demandas

```{python}
#import re, unicodedata
#import pandas as pd

def strip_acc(s: str) -> str:
    return "".join(ch for ch in unicodedata.normalize("NFKD", s) if not unicodedata.combining(ch))

def norm_text(s: str) -> str:
    s = strip_acc(s).casefold()
    s = re.sub(r"\s+", " ", s).strip()
    return s

# crie uma cópia “limpa”
df["demandas_label"] = df["demandas"]  # backup do texto original
df["demandas_clean"] = (
    df["demandas"]
      .astype(str)
      .str.strip()
      .replace({"": pd.NA, "nan": pd.NA, "NaN": pd.NA, "Sem comentários": pd.NA, "sem comentarios": pd.NA})
)

# versão normalizada (sem acentos/minúscula) – útil pra buscas
df["demandas_norm"] = df["demandas_clean"].dropna().map(norm_text)

```

```{python}
# stopwords bem simples PT-BR (edite à vontade)
stops = {
    "de","da","do","das","dos","e","a","o","as","os","um","uma","para","por","com",
    "no","na","nos","nas","em","sobre","que","ao","à","às","ou","se","como","sobre",
    "mais","menos","muito","pouco"
}

# tokenização super simples (palavras com letras acentuadas e números)
def tokenize(s: str):
    return re.findall(r"[a-zA-ZÀ-ÿ0-9]+", s)

tokens = []
for txt in df["demandas_norm"].dropna():
    for t in tokenize(txt):
        t2 = t.lower()
        if t2 not in stops and len(t2) > 2:
            tokens.append(t2)

#pd.Series(tokens).value_counts().head(30)

```

```{python}
from collections import Counter

#bigrams = []
#for txt in df["demandas_norm"].dropna():
#    toks = [t for t in tokenize(txt) if t not in stops and len(t) > 2]
#    bigrams += list(zip(toks, toks[1:]))

#Counter(bigrams).most_common(20)

```

```{python}
def any_match(text, patterns):
    # text já normalizado; patterns devem ser strings simples
    return any(p in text for p in patterns)

#temas = {
#    "forragens":       ["forrag", "palma", "sorgo", "buffel"],
#    "caprinos_ovinos": ["caprin", "ovin"],
#    "caatinga":        ["caatinga", "restauracao", "conservacao"],
#    "irrigacao":       ["irrigacao", "eficiencia"],
#    "biossalina":      ["biossalin"],
#    "energia":         ["energia", "fotovoltaic", "solar", "eolica"],
#    "mecanizacao":     ["mecaniza", "maquina"],
#    "aguas_salobras":  ["aguas de poco", "salobr"],
#    "produtos_regionais": ["panc", "licuri", "umbu", "queijo artesan"],
#    "gestao":          ["gestao", "empreendimentos rurais", "tomada de decis"],
#}

#for nome, pats in temas.items():
#    df[nome] = df["demandas_norm"].fillna("").apply(lambda s: int(any_match(s, pats)))

#df[list(temas.keys())].sum().sort_values(ascending=False)
```

```{python}
tabela_demandas = (
    df.loc[df["demandas"].notna(), ["demandas"]]
      .rename(columns={"demandas": "demanda"})
      .reset_index()                # traz o índice original
      .rename(columns={"index": "linha"})
)
#tabela_demandas
#import pandas as pd

pd.set_option("display.max_colwidth", None)
tabela_demandas  # só avaliar a célula já mostra completo
```

# Comentários

```{python}
tabela_comentarios = (
    df.loc[df["comentarios"].notna(), ["comentarios"]]
      .rename(columns={"comentarios": "comentarios"})
      .reset_index()                # traz o índice original
      .rename(columns={"index": "linha"})
)
tabela_comentarios
```
